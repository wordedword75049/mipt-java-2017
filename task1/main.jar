
vector <int> buildLCP(string str, int suf[maxlen]) {
	int n = str.length();
	vector<int> lcp(n);
	int pos[n];  // pos[] — массив, обратный массиву suf
	for (int i = 0; i < n; ++i) {
		pos[suf[i]] = i;
	};
	int k = 0;
	for (int i = 0; i < n; ++i) {
		if (k > 0)
		{
			k--;
		};
		if (pos[i] == n - 1) {
			lcp[n - 1] = -1;
			k = 0;
		}
		else {
			int j = suf[pos[i] + 1];
			while ((max(i + k, j + k) < n) && (str[i + k] == str[j + k])) {
				k++;
			}
			lcp[pos[i]] = k;
		}
	}
	return lcp;
}

int BuildSufMas(string s, int n)[maxlen] {
	//нулевая фаза
	int p[maxlen], cnt[maxlen], c[maxlen];
	memset(cnt, 0, alphabet * sizeof(int));
	for (int i = 0; i<n; ++i)
		++cnt[s[i]];
	for (int i = 1; i<alphabet; ++i)
		cnt[i] += cnt[i - 1];
	for (int i = 0; i<n; ++i)
		p[--cnt[s[i]]] = i;
	c[p[0]] = 0;
	int classes = 1;
	for (int i = 1; i<n; ++i) {
		if (s[p[i]] != s[p[i - 1]])  ++classes;
		c[p[i]] = classes - 1;
	}

	//ненулевые фазы
	int pn[maxlen], cn[maxlen];
	for (int h = 0; (1 << h)<n; ++h) {
		for (int i = 0; i<n; ++i) {
			pn[i] = p[i] - (1 << h);
			if (pn[i] < 0)  pn[i] += n;
		}
		memset(cnt, 0, classes * sizeof(int));
		for (int i = 0; i<n; ++i)
			++cnt[c[pn[i]]];
		for (int i = 1; i<classes; ++i)
			cnt[i] += cnt[i - 1];
		for (int i = n - 1; i >= 0; --i)
			p[--cnt[c[pn[i]]]] = pn[i];
		cn[p[0]] = 0;
		classes = 1;
		for (int i = 1; i<n; ++i) {
			int mid1 = (p[i] + (1 << h)) % n, mid2 = (p[i - 1] + (1 << h)) % n;
			if (c[p[i]] != c[p[i - 1]] || c[mid1] != c[mid2])
				++classes;
			cn[p[i]] = classes - 1;
		}
		memcpy(c, cn, n * sizeof(int));
	}
	return p;
}


int main()
{
	string s;
	cin >> s;
	s += "$";
	int n = s.length();
	const int maxlen = 100000;
	const int alphabet = 256;


	for (int i = 0; i<n; ++i) {
		for (int j = p[i]; j<s.length(); ++j) {
		}
	}
	vector<int>lcpmas = buildLCP(s, p);

	int sum1 = 0, sum2 = 0;
	for (int i = 1; i<n; ++i) {
		sum1 += ((n - p[i]) - 1);
	};
	for (int i = 1; i<n - 1; ++i) {
		sum2 += lcpmas[i];
	};
	cout << sum1 - sum2;
